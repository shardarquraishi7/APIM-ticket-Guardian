import * as fs from 'fs';
import * as path from 'path';
import { mockEmbedderService as embedderService } from '@/utils/mock-embedder';
import { createLogger } from '@/lib/logger';

// Matches the structure from tickets.json
interface TicketDoc {
  id: string;
  content: string;
  metadata: Record<string, any>;
  dates: { submitted?: string; resolved?: string };
  type: string;
}

// Define the namespace for the ticket knowledge base
const NAMESPACE = 'api-ticket-knowledge-base';

const logger = createLogger('ticket-vectorizer');

/**
 * Load JSON docs, embed them, and save to a file.
 * 
 * NOTE: This is a mock implementation that saves embeddings to a file.
 * In a production environment, you would use the Turbopuffer SDK to store
 * embeddings in the Fuelix vector store.
 */
export async function vectorizeTickets(): Promise<void> {
  // 1. Read the JSON file generated by xlsx-to-json
  const jsonPath = path.join(process.cwd(), 'kb_source', 'tickets.json');
  if (!fs.existsSync(jsonPath)) {
    console.error(`ERROR: tickets.json not found at ${jsonPath}`);
    process.exit(1);
  }
  console.log('ðŸ“„ Loading tickets.jsonâ€¦');
  const raw = fs.readFileSync(jsonPath, 'utf-8');
  const docs: TicketDoc[] = JSON.parse(raw);

  // 2. Embed all ticket contents using mock embedder
  console.log(`ðŸ”¢ Embedding ${docs.length} ticket chunksâ€¦`);
  const contents = docs.map(d => d.content);
  const embeddings = await embedderService.embedChunks(
    contents.map((content, i) => ({
      content,
      metadata: {
        path: docs[i].id,
        source: docs[i].id,
        ...docs[i].metadata
      }
    }))
  );

  // 3. Save embeddings to a file (mock vector store)
  console.log('ðŸ“¡ Saving ticket embeddings to fileâ€¦');
  try {
    // Create a directory for the embeddings if it doesn't exist
    const embeddingsDir = path.join(process.cwd(), 'kb_source', 'embeddings');
    if (!fs.existsSync(embeddingsDir)) {
      fs.mkdirSync(embeddingsDir, { recursive: true });
    }

    // Save the embeddings to a file
    const embeddingsPath = path.join(embeddingsDir, 'ticket-embeddings.json');
    const embeddingsData = {
      namespace: NAMESPACE,
      vectors: docs.map((doc, i) => ({
        id: doc.id,
        content: doc.content,
        metadata: doc.metadata,
        embedding: embeddings[i].embedding.slice(0, 10) // Only save first 10 dimensions to save space
      }))
    };
    fs.writeFileSync(embeddingsPath, JSON.stringify(embeddingsData, null, 2));

    console.log(`âœ… Vectorized and saved ${docs.length} ticket chunks to ${embeddingsPath}.`);
    console.log(`NOTE: Using mock embeddings since Turbopuffer SDK integration is not available.`);
    console.log(`In production, you would use the Turbopuffer SDK to store embeddings in the Fuelix vector store.`);
  } catch (error) {
    console.error('Error saving embeddings to file:', error);
    process.exit(1);
  }
}
